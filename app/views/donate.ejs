<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('header') %>
  <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.3/dist/purify.min.js" integrity="sha256-ykUC1Oqnato0nykqa4dwQTqKTkewuLP2Rhu49YV/kYY=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js" integrity="sha256-WCzAhd2P6gRJF9Hv3oOOd+hFJi/QJbv+Azn4CGB8gfY=" crossorigin="anonymous"></script>
  <!-- SurveyJS Scripts -->
  <link rel="stylesheet" href="<%= typeof contextPath !== 'undefined' ? contextPath : '' %>/vendor/survey-core/survey-core.css" />
  <script src="<%= typeof contextPath !== 'undefined' ? contextPath : '' %>/vendor/survey-core/survey.core.min.js"></script>
  <script src="<%= typeof contextPath !== 'undefined' ? contextPath : '' %>/vendor/survey-js-ui/survey-js-ui.min.js"></script>
  <script src="<%= typeof contextPath !== 'undefined' ? contextPath : '' %>/vendor/survey-core/survey.i18n.min.js"></script>
  <script src="js/donate.js"></script>
  <script>
      const EXPERIMENT_GROUP = <%- JSON.stringify(experimentGroup) %>;
      const DONATE_ERRORS = <%- JSON.stringify(donateErrors) %>;
      const languageCode = "<%= navigation.languageCode %>";
      window.onload = function() {
        const contextIds = <%- JSON.stringify(contexts.map(context => context.id)) %>;
        addDonateEventListeners('habit-input', 'submit', 'clear', contextIds, EXPERIMENT_GROUP, languageCode, grecaptcha);

    };
  </script>
  <style>
    .recaptcha-container {
      display: flex;
      justify-content: center;
      margin-top: 1em;
    }
    <% for (const context of contexts) { %>
      .mark_<%= context.id %> {
        background-color: <%= context.color %>;
        border-radius: 10px;
      }
    <% } %>
  </style>
</head>

<body>
  <%- include('nav', navigation) %>

  <!-- Introduction -->
  <% if (experimentGroup.closedDescription) { %>
  <div class="container" id="introduction">
    <div class="row">
      <div class="custom-square rounded position-relative">
        <h5 id="header"><%= header %></h5>
        <div class="row">
          <div class="col-md-12 text-justify">
            <p id="intro-text"><%- text %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } %>

  <!-- Datadonation guide -->
  <div class="container ml-5 mr-5" id="datadonationheader">
    <div class="row">
      <h5 id="header"><%= proceeding %></h5>
      <div class="col-12">
        <ul id="steps" style="list-style-type: decimal">
          <li><%= step1 %></li>
        <% if (experimentGroup.closedTask) { %>
          <li><%= step2 %></li>
        <% } %>
          <li><%= step3 %></li>
        </ul>
      </div>
    </div>
    <div class="row form-group">
      <div class="col-11 habit-input-container">
        <div contenteditable="true" class="form-control" id="habit-input"></div>
      </div>
      <div class="col-1 p-0 clear-container">
        <button id="clear"><%= clear %></button>
      </div>
    </div>
    <% if (experimentGroup.closedTask) { %>
      <div class="row mt-2">
        <div class="col-12" role="alert">
          <p id="example1"><%- example1 %></p>
        </div>
      </div>

      <div class="d-flex flex-wrap">
        <% for (const context of contexts) { %>
          <div class="m-1 flex-grow-1">
            <button
              class="btn context-btn mt-0 h-100"
              id="<%= context.id %>"
              style="
                --btn-color: <%= context.color %>;
                --btn-bg:    <%= context.color %>66;
              "
            >
              <%= context.labels[navigation.languageCode] %>
            </button>
          </div>
        <% } %>
      </div>
    <% } %>
  </div>

  <!-- Error messages -->
  <div id="error-messages" class="container" style="color: red; display: none;">
    <div class="row">
      <div class="col-12">
        <p id="error-text"></p>
      </div>
    </div>
  </div>

<!-- Form with reCAPTCHA -->
  <form action="<%= navigation.languageCode %>/donate/submit-form" method="POST">
 
  <!-- Habit Strength Slider -->
  <div class="container ml-5 mr-5" id="slider-outer-container">
    <div class="row">
      <div class="col-12">
        <div id="habitStrengthSurvey"></div>
        <input type="hidden" id="habitStrength" name="habitStrength" value="">
      </div>
    </div>
  </div>

  <div class="recaptcha-container">
     <%- recaptcha || '' %>
  </div>
  <div class="container mb-5">
    <div class="col-12">
      <button type="submit" class="button" id="submit"><h4><strong><%= submit || 'Absenden' %></strong></h4></button>
    </div>
  </div>
</form>


  <!-- Footer -->
  <%- include('footer') %>

<script>
  // Initialize SurveyJS habit strength slider
  function initHabitStrengthSurvey() {
    // Check if SurveyJS is loaded
    if (typeof Survey === 'undefined') {
      console.error('SurveyJS not loaded');
      return;
    }
    
    // Get translations from server-side language messages
    const sliderTranslations = <%- JSON.stringify(habitStrengthSlider) %>;
    const currentLang = languageCode || 'de';
    
    // Create survey configuration with numeric rating scale
    const surveyModel = new Survey.Model({
      elements: [{
        type: "rating",
        name: "habitStrength",
        title: sliderTranslations.title,
        minRateDescription: sliderTranslations.minDescription,
        maxRateDescription: sliderTranslations.maxDescription,
        rateCount: 7,
        rateMin: 1,
        rateMax: 7,
        rateValues: [1, 2, 3, 4, 5, 6, 7],
        displayRateDescriptionsAsExtremeItems: true
      }],
      showQuestionNumbers: "off",
      showCompletedPage: false,
      showNavigationButtons: false
    });

    // Set locale for SurveyJS
    surveyModel.locale = currentLang;
    
    // Apply consistent theme with page styling
    surveyModel.applyTheme({
      themeName: "default",
      colorPalette: "light",
      isPanelless: true,
      cssVariables: {
        "--sv-color-primary": "#50b034",
        "--sv-color-primary-light": "#7bc95f", 
        "--sv-color-primary-dark": "#3a8527",
        "--sv-font-family": "'Figtree', sans-serif"
      }
    });

    // Set default value to middle (4)
    surveyModel.setValue("habitStrength", 4);
    
    // Update hidden input when value changes
    surveyModel.onValueChanged.add((sender, options) => {
      if (options.name === "habitStrength") {
        const hiddenInput = document.getElementById('habitStrength');
        if (hiddenInput) {
          hiddenInput.value = options.value;
        }
      }
    });

    // Initialize hidden input with default value
    const hiddenInput = document.getElementById('habitStrength');
    if (hiddenInput) {
      hiddenInput.value = 4;
    }
    
    // Render survey
    const container = document.getElementById("habitStrengthSurvey");
    if (!container) {
      console.error('Survey container not found');
      return;
    }

    try {
      surveyModel.render(container);
      console.log('SurveyJS rendered successfully');
      
      // Add pole explanations and descriptions after render
      setTimeout(() => {
        // Apply Figtree font to entire survey container
        container.style.fontFamily = "'Figtree', sans-serif";
        
        // Add CSS to ensure all SurveyJS elements use Figtree font and proper styling
        const style = document.createElement('style');
        style.textContent = `
          #habitStrengthSurvey * {
            font-family: 'Figtree', sans-serif !important;
          }
          #habitStrengthSurvey .sv-title {
            font-family: 'Figtree', sans-serif !important;
          }
          #habitStrengthSurvey .sv-rating-item {
            font-family: 'Figtree', sans-serif !important;
          }
          #habitStrengthSurvey .sd-body,
          #habitStrengthSurvey .sd-body--responsive {
            background-color: #dadada !important;
            background: #dadada !important;
            padding: 0 !important;
          }
          .sd-body, .sd-body--responsive {
            background-color: #dadada !important;
            background: #dadada !important;
          }
          #habitStrengthSurvey .sd-root-modern {
            background-color: #dadada !important;
          }
          #habitStrengthSurvey .sd-container-modern {
            background-color: #dadada !important;
          }
          #habitStrengthSurvey .sd-page {
            background-color: #dadada !important;
            padding: 0 !important;
          }
          #habitStrengthSurvey .sd-question__title {
            text-align: center !important;
            margin-bottom: 20px !important;
          }
          #habitStrengthSurvey .sd-rating {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
            flex-wrap: wrap !important;
            width: 100% !important;
          }
          #habitStrengthSurvey .sd-rating fieldset {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
            gap: 10px !important;
            width: 100% !important;
            border: none !important;
            margin: 0 !important;
            padding: 0 !important;
          }
          #habitStrengthSurvey .sd-rating__item {
            text-align: center !important;
            flex: 0 0 auto !important;
            margin-bottom: 5px !important;
          }
          #habitStrengthSurvey .sd-scrollable-container {
            display: flex !important;
            justify-content: center !important;
            width: 100% !important;
            padding-bottom: 5px !important;
          }
          #habitStrengthSurvey .sd-element__content {
            display: flex !important;
            justify-content: center !important;
            width: 100% !important;
          }
          #habitStrengthSurvey .sv-string-viewer {
            text-align: center !important;
          }
          #habitStrengthSurvey {
            padding: 35px !important;
          }
        `;
        document.head.appendChild(style);
        
        // Add pole explanations at the top
        const surveyTitle = container.querySelector('.sv-title');
        if (surveyTitle) {
          const poleExplanations = document.createElement('div');
          poleExplanations.innerHTML = `
            <div style="display: flex; justify-content: space-between; margin: 15px 0; padding: 0 20px; font-size: 13px; font-family: 'Figtree', sans-serif;">
              <span style="font-weight: bold; color: #d32f2f;">← ${sliderTranslations.minDescription}</span>
              <span style="font-weight: bold; color: #388e3c;">${sliderTranslations.maxDescription} →</span>
            </div>
          `;
          surveyTitle.parentNode.insertBefore(poleExplanations, surveyTitle.nextSibling);
        }
        
        // Add descriptions below rating buttons
        const ratingContainer = container.querySelector('.sv-rating');
        if (ratingContainer) {
          const descriptionsDiv = document.createElement('div');
          descriptionsDiv.style.display = 'flex';
          descriptionsDiv.style.justifyContent = 'space-between';
          descriptionsDiv.style.marginTop = '15px';
          descriptionsDiv.style.fontSize = '10px';
          descriptionsDiv.style.color = '#555';
          descriptionsDiv.style.textAlign = 'center';
          descriptionsDiv.style.fontFamily = "'Figtree', sans-serif";
          
          sliderTranslations.labels.forEach(label => {
            const desc = document.createElement('div');
            desc.textContent = label;
            desc.style.flex = '1';
            desc.style.padding = '0 2px';
            desc.style.lineHeight = '1.2';
            desc.style.fontFamily = "'Figtree', sans-serif";
            descriptionsDiv.appendChild(desc);
          });
          
          ratingContainer.parentNode.insertBefore(descriptionsDiv, ratingContainer.nextSibling);
        }
      }, 200);
      
    } catch (error) {
      console.error('Error rendering SurveyJS:', error);
      // Fallback: create simple rating buttons
      container.innerHTML = `
        <div style="text-align: center; font-family: 'Figtree', sans-serif;">
          <h5 style="font-family: 'Figtree', sans-serif;">${sliderTranslations.title}</h5>
          <div style="margin: 20px 0; font-family: 'Figtree', sans-serif;">
            ${[1,2,3,4,5,6,7].map(num => 
              `<button type="button" onclick="setHabitStrength(${num})" 
                       style="margin: 0 5px; width: 40px; height: 40px; border: 2px solid #50b034; 
                              background: white; border-radius: 5px; font-weight: bold; font-family: 'Figtree', sans-serif;">${num}</button>`
            ).join('')}
          </div>
          <div style="display: flex; justify-content: space-between; margin: 15px 0; padding: 0 20px; font-size: 13px; font-family: 'Figtree', sans-serif;">
            <span style="font-weight: bold; color: #d32f2f;">← ${sliderTranslations.minDescription}</span>
            <span style="font-weight: bold; color: #388e3c;">${sliderTranslations.maxDescription} →</span>
          </div>
        </div>
      `;
    }
  }

  // Fallback function for simple buttons if SurveyJS fails
  function setHabitStrength(value) {
    const hiddenInput = document.getElementById('habitStrength');
    if (hiddenInput) {
      hiddenInput.value = value;
    }
    
    // Update button styling to show selection
    const buttons = document.querySelectorAll('#habitStrengthSurvey button');
    buttons.forEach((btn, index) => {
      if (index + 1 === value) {
        btn.style.background = '#50b034';
        btn.style.color = 'white';
      } else {
        btn.style.background = 'white';
        btn.style.color = 'black';
      }
    });
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    // Small delay to ensure SurveyJS is loaded
    setTimeout(initHabitStrengthSurvey, 100);
  });
</script>
  
</body>
</html>
