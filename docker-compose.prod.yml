services:
  proxy:
    image: traefik:v3.0
    container_name: h3-proxy
    command:
      - --api.dashboard=true
      - --log.level=INFO
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=h3-proxy
      # HTTP entrypoint
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # HTTPS entrypoint
      - --entrypoints.websecure.address=:443
      # ACME configuration (TU Dresden by default, or Let's Encrypt as fallback)
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=${ACME_CA_SERVER:-https://acme.pki.cert.tu-dresden.de/directory}
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - h3-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/data/appdata/hhh/traefik-certs:/letsencrypt
    labels:
      - traefik.enable=true
      # Dashboard
      - traefik.http.routers.dashboard.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=dashboard-auth
      # Basic auth for dashboard (user: admin, password: change-this-password)
      # Generate with: echo $(htpasswd -nb admin your-password) | sed -e s/\\$/\\$\\$/g
      - traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH:-admin:$$apr1$$8EVjn/nj$$GiLUZqcbueTFeD23SuB6x0}

  app:
    image: hhh/app
    container_name: h3-app
    build: ./app
    restart: always
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--no-warnings
      - APP_BASE_PATH=${APP_BASE_PATH:-/}
      - RECAPTCHA_SITEKEY=${RECAPTCHA_SITEKEY}
      - RECAPTCHA_SECRETKEY=${RECAPTCHA_SECRETKEY}
      - RECAPTCHA_USE_RECAPTCHA_DOMAIN=${RECAPTCHA_USE_RECAPTCHA_DOMAIN:-false}
      - MONGO_DB=surveyjs
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOST=mongo
      - GRAPH_BACKEND=${GRAPH_BACKEND:-neo4j}
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    # Dockerfile already sets USER node, no need to override
    networks:
      - h3-proxy
    depends_on:
      - fuseki
      - mongo
      - neo4j
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.routers.app.service=app
      - traefik.http.services.app.loadbalancer.server.port=3000

  fuseki:
    image: hhh/fuseki
    container_name: h3-fuseki
    build: ./fuseki
    restart: always
    env_file:
      - .env
    environment:
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    # Fuseki base image runs as 'fuseki' user (UID 9008)
    networks:
      - h3-proxy
    volumes:
      - fuseki-data:/fuseki
    depends_on:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.fuseki.rule=Host(`${DOMAIN}`) && PathPrefix(`/fuseki`)
      - traefik.http.routers.fuseki.entrypoints=websecure
      - traefik.http.routers.fuseki.tls=true
      - traefik.http.routers.fuseki.tls.certresolver=letsencrypt
      - traefik.http.routers.fuseki.service=fuseki
      - traefik.http.services.fuseki.loadbalancer.server.port=3030
      - traefik.http.middlewares.fuseki-stripprefix.stripprefix.prefixes=/fuseki
      - traefik.http.routers.fuseki.middlewares=fuseki-stripprefix

  mongo:
    image: mongo:latest
    container_name: h3-mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=surveyjs
    # MongoDB runs as 'mongodb' user (UID 999) by default
    networks:
      - h3-proxy
    volumes:
      - ./mongo/entrypoint:/docker-entrypoint-initdb.d:ro
      - /mnt/data/appdata/hhh/mongo/db:/data/db
      - /mnt/data/appdata/hhh/mongo/config:/data/configdb

  mongo-express:
    image: mongo-express:latest
    container_name: h3-mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_SITE_BASEURL=/mongo/
    networks:
      - h3-proxy
    depends_on:
      - mongo
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongo-express.rule=Host(`${DOMAIN}`) && PathPrefix(`/mongo`)
      - traefik.http.routers.mongo-express.entrypoints=websecure
      - traefik.http.routers.mongo-express.tls=true
      - traefik.http.routers.mongo-express.tls.certresolver=letsencrypt
      - traefik.http.routers.mongo-express.service=mongo-express
      - traefik.http.services.mongo-express.loadbalancer.server.port=8081

  translate:
    image: libretranslate/libretranslate:latest
    container_name: h3-translate
    restart: always
    # LibreTranslate runs as 'libretranslate' user (UID 1032)
    # Volume must be created with proper permissions for UID 1032
    volumes:
      - /mnt/data/appdata/hhh/translate:/home/libretranslate/.local/share/argos-translate/packages
    networks:
      - h3-proxy
    env_file:
      - .env
    environment:
      - LT_LOAD_ONLY=${LT_LOAD_ONLY:-de,en,ja}
      - LT_REQ_LIMIT=${LT_REQ_LIMIT:-0}
    depends_on:
      - app
    # Initialize volume with correct permissions on first run
    user: "1032:1032"
    labels:
      - traefik.enable=true
      - traefik.http.routers.translate.rule=Host(`${DOMAIN}`) && PathPrefix(`/translate`)
      - traefik.http.routers.translate.entrypoints=websecure
      - traefik.http.routers.translate.tls=true
      - traefik.http.routers.translate.tls.certresolver=letsencrypt
      - traefik.http.routers.translate.service=translate
      - traefik.http.services.translate.loadbalancer.server.port=5000
      - traefik.http.middlewares.translate-stripprefix.stripprefix.prefixes=/translate
      - traefik.http.routers.translate.middlewares=translate-stripprefix

  neo4j:
    image: neo4j:5
    container_name: h3-neo4j
    restart: always
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["n10s"]
      - NEO4J_server_directories_import=/import
      - NEO4J_dbms_security_procedures_unrestricted=n10s.*
      - NEO4J_dbms_security_procedures_allowlist=n10s.*
    # Neo4j runs as 'neo4j' user (UID 7474)
    networks:
      - h3-proxy
    ports:
      - "7474:7474"  # Neo4j Browser HTTP
      - "7687:7687"  # Bolt protocol
    volumes:
      - /mnt/data/appdata/hhh/neo4j/data:/data
      - /mnt/data/appdata/hhh/neo4j/logs:/logs
      - ./fuseki/init:/import:ro

  backup:
    image: hhh/backup
    container_name: h3-backup
    build: ./backup-service
    restart: always
    env_file:
      - .env
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-14}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
      - ALERT_EMAIL=${ALERT_EMAIL:-}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MAIL_USER=${MAIL_USER:-}
      - MAIL_PASS=${MAIL_PASS:-}
      - MAIL_FROM=${MAIL_FROM:-}
    volumes:
      - ./backups:/backups
      - fuseki-data:/fuseki:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - h3-proxy
    depends_on:
      - mongo
      - fuseki
      - neo4j
    command: /bin/bash -c "echo 'Waiting 2 minutes for services to stabilize...'; sleep 120; while true; do /backup.sh; sleep 86400; done"

networks:
  h3-proxy:
    name: h3-proxy
    driver: bridge

volumes:
  fuseki-data:
    name: h3-fuseki-data
